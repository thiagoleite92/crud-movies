{"version":3,"sources":["components/MovieCard.js","components/Loading.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","pages/MovieDetails.js","components/MovieForm.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","this","props","title","storyline","id","imagePath","data-testid","className","src","alt","to","React","Component","Loading","movies","subtitle","rating","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","MovieList","state","loading","fetchMovies","a","setState","key","MovieDetails","fetchMovie","bind","delMovie","match","params","movieAPI","onClick","MovieForm","handleSubmit","onSubmit","field","newValue","htmlFor","placeholder","type","value","onChange","event","target","step","min","max","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","defaultProps","NewMovie","history","push","EditMovie","editMovie","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f13f74e9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './MovieCard.css';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, storyline, id, imagePath } = movie;\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card\">\n        <h1>{ title }</h1>\n        <h4>{ storyline }</h4>\n        <img src={ imagePath } alt={ title } />\n        <br />\n        <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    id: PropTypes.number,\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\nimport * as movieAPI from '../services/movieAPI';\nimport './MovieList.css';\n\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  async fetchMovies() {\n    const response = await movieAPI.getMovies();\n    this.setState({\n      loading: false,\n      movies: response,\n    });\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n    if (loading) {\n      return <Loading />;\n    } if (!loading) {\n      return (\n        <div data-testid=\"movie-list\" className=\"movie-list\">\n          <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n          {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n        </div>\n      );\n    }\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport * as movieAPI from '../services/movieAPI';\nimport './MovieDetails.css';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      movie: {},\n    };\n    this.fetchMovie = this.fetchMovie.bind(this);\n    this.delMovie = this.delMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  async fetchMovie() {\n    const { match: { params: { id } } } = this.props;\n    const response = await movieAPI.getMovie(id);\n    this.setState({\n      loading: false,\n      movie: response,\n    });\n  }\n\n  async delMovie() {\n    const { match: { params: { id } } } = this.props;\n    await movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    const { movie, loading } = this.state;\n    const { title, storyline, imagePath, genre, rating, subtitle, id } = movie;\n    if (loading) {\n      return <Loading />;\n    } if (!loading) {\n      return (\n        <div data-testid=\"movie-details\" className=\"movie-details\">\n          <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n          <p>{ `Title: ${title}` }</p>\n          <p>{ `Subtitle: ${subtitle}` }</p>\n          <p>{ `Storyline: ${storyline}` }</p>\n          <p>{ `Genre: ${genre}` }</p>\n          <p>{ `Rating: ${rating}` }</p>\n          <section className=\"movie-options\">\n            <Link to=\"/\">VOLTAR  </Link>\n            <Link to={ `/movies/${id}/edit` }>EDITAR  </Link>\n            <Link to=\"/\" onClick={ this.delMovie }>DELETAR </Link>\n          </section>\n        </div>\n      );\n    }\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <label htmlFor=\"movie_title\">\n        Título\n        <input\n          placeholder=\"Insira o título\"\n          id=\"movie_title\"\n          type=\"text\"\n          className=\"validate\"\n          value={ title }\n          onChange={ (event) => this.updateMovie('title', event.target.value) }\n        />\n      </label>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <label htmlFor=\"movie_subtitle\">\n        Subtítulo\n        <input\n          placeholder=\"Insira o subtítulo\"\n          id=\"movie_subtitle\"\n          type=\"text\"\n          value={ subtitle }\n          onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n        />\n      </label>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          Imagem\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <label htmlFor=\"movie_storyline\">\n        Sinopse\n        <textarea\n          id=\"movie_storyline\"\n          value={ storyline }\n          placeholder=\"Sinopse\"\n          onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n        />\n      </label>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <label htmlFor=\"movie_genre\">\n        Gênero\n        <select\n          id=\"movie_genre\"\n          value={ genre }\n          onChange={ (event) => this.updateMovie('genre', event.target.value) }\n        >\n          <option value=\"action\">Ação</option>\n          <option value=\"comedy\">Comédia</option>\n          <option value=\"thriller\">Suspense</option>\n          <option value=\"fantasy\">Fantasia</option>\n        </select>\n      </label>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <label htmlFor=\"movie_rating\">\n        Avaliação\n        <input\n          placeholder=\"Your ranking\"\n          id=\"movie_rating\"\n          type=\"number\"\n          step={ 1 }\n          min={ 0 }\n          max={ 5 }\n          value={ rating }\n          onChange={ (event) => this.updateMovie('rating', event.target.value) }\n        />\n      </label>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <button\n        type=\"button\"\n        onClick={ this.handleSubmit }\n      >\n        Submit\n      </button>\n    );\n  }\n\n  render() {\n    return (\n      <form className=\"new-movie-form\">\n        {this.renderTitleInput()}\n        {this.renderSubtitleInput()}\n        {this.renderImagePathInput()}\n        {this.renderStorylineInput()}\n        {this.renderGenreSelection()}\n        {this.renderRatingInput()}\n        {this.renderSubmitButton()}\n      </form>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    genre: PropTypes.string,\n    rating: PropTypes.number,\n  }),\n};\n\nMovieForm.defaultProps = {\n  movie: {},\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\nimport './NewMovie.css';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(newMovie) {\n    const { history } = this.props;\n    await movieAPI.createMovie(newMovie);\n    history.push('/');\n  }\n\n  render() {\n    return (\n      <div data-testid=\"new-movie\" className=\"new-movie-container\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Loading from '../components/Loading';\nimport { MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      movie: {},\n    };\n    this.editMovie = this.editMovie.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.editMovie();\n  }\n\n  async handleSubmit(updatedMovie) {\n    const { history } = this.props;\n    await movieAPI.updateMovie(updatedMovie);\n    history.push('/'); // redirect para página inicial\n  }\n\n  async editMovie() {\n    const { match: { params: { id } } } = this.props;\n    const response = await movieAPI.getMovie(id);\n    this.setState({\n      loading: false,\n      movie: response,\n    });\n  }\n\n  render() {\n    const { loading, movie } = this.state;\n\n    if (loading) {\n      return <Loading />;\n    }\n    if (!loading) {\n      return (\n        <div data-testid=\"edit-movie\">\n          <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n        </div>\n      );\n    }\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" component={ MovieList } />\n          <Route exact path=\"/movies/new\" component={ NewMovie } />\n          <Route exact path=\"/movies/:id\" component={ MovieDetails } />\n          <Route exact path=\"/movies/:id/edit\" component={ EditMovie } />\n          <Route component={ NotFound } />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}